CREATE TABLE COURSE_CATEGORY (
    CTG_CODE VARCHAR(50) PRIMARY KEY,
    CTG_NAME VARCHAR(100) NOT NULL
);

CREATE TABLE PROGRAM (
    PROG_CODE VARCHAR(50) PRIMARY KEY,
    PROG_TITLE VARCHAR(100) NOT NULL
);

CREATE TABLE COURSE (
    CRS_CODE VARCHAR(50) PRIMARY KEY,
    CRS_TITLE VARCHAR(100) NOT NULL,
    CRS_UNITS NUMERIC(3,1) NOT NULL,
    CRS_LEC INTEGER NOT NULL,
    CRS_LAB INTEGER NOT NULL,
    CTG_CODE VARCHAR(50) NOT NULL,
    
  	FOREIGN KEY (CTG_CODE)REFERENCES COURSE_CATEGORY(CTG_CODE) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE STUDENT (
    STUD_ID SERIAL PRIMARY KEY,
    STUD_FNAME VARCHAR(50) NOT NULL,
    STUD_LNAME VARCHAR(50) NOT NULL,
    STUD_MNAME VARCHAR(50),
	STUD_EMAIL VARCHAR(100) UNIQUE NOT NULL,
    STUD_DOB DATE NOT NULL,
    STUD_CONTACT VARCHAR(20) NOT NULL,
    STUD_CITY_ADDRESS TEXT,
    STUD_HOME_ADDRESS TEXT,
    STUD_DISTRICT VARCHAR(50),
    STUD_IS_FIRST_GEN BOOLEAN DEFAULT FALSE,
    STUD_YR_LEVEL INTEGER,
    STUD_MAJOR VARCHAR(100),
    STUD_STATUS VARCHAR(20),
    STUD_SEM INTEGER,
    BSEC_CODE VARCHAR(20),
    PROG_CODE VARCHAR(50),
    PASSWORD_HASH VARCHAR(255) NOT NULL,

    FOREIGN KEY (BSEC_CODE)REFERENCES BLOCK_SECTION(BSEC_CODE) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (PROG_CODE) REFERENCES PROGRAM(PROG_CODE) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ACADEMIC_YEAR (
    AY_CODE VARCHAR(20) PRIMARY KEY,
    AY_START_YEAR INTEGER NOT NULL,
    AY_END_YEAR INTEGER NOT NULL,
    CONSTRAINT VALID_YEAR_RANGE CHECK (AY_END_YEAR = AY_START_YEAR + 1)
);

CREATE TABLE SEMESTER (
    SEM_ID SERIAL PRIMARY KEY,
    SEM_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE BLOCK_SECTION (
    BSEC_CODE VARCHAR(20) PRIMARY KEY,
    BSEC_NAME VARCHAR(100) NOT NULL,
    BSEC_STATUS VARCHAR(20) DEFAULT TRUE,
    PROG_CODE VARCHAR(50) NOT NULL,
    AY_CODE VARCHAR(20) NOT NULL,
    SEM_ID INTEGER NOT NULL,
	
    FOREIGN KEY (PROG_CODE) REFERENCES PROGRAM(PROG_CODE),
   	FOREIGN KEY (AY_CODE) REFERENCES ACADEMIC_YEAR(AY_CODE),
    FOREIGN KEY (SEM_ID) REFERENCES SEMESTER(SEM_ID)
);


INSERT INTO BLOCK_SECTION (BSEC_CODE, BSEC_NAME, BSEC_STATUS, PROG_CODE, AY_CODE, SEM_ID, YRL_ID)
VALUES 
('BSIT-1A-2025', 'BSIT 1A', TRUE, 'BSIT', '2025-2026', 2, 1),
('BSIT-1B-2025', 'BSIT 1B', TRUE, 'BSIT', '2025-2026', 2, 1),
('BSIS-1A-2025', 'BSIS 1A', TRUE, 'BSIS', '2025-2026', 2, 1),
('BSIS-1B-2025', 'BSIS 1B', TRUE, 'BSIS', '2025-2026', 2, 1);


CREATE TABLE CURRICULUM (
    CUR_CODE VARCHAR(50) PRIMARY KEY,
    PROG_CODE VARCHAR(50) NOT NULL,
    AY_CODE VARCHAR(20) NOT NULL,
    FOREIGN KEY (PROG_CODE) REFERENCES PROGRAM(PROG_CODE) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (AY_CODE) REFERENCES ACADEMIC_YEAR(AY_CODE)
);


CREATE TABLE CURRICULUM_COURSE (
    CUR_CODE VARCHAR(50) NOT NULL,
    CRS_CODE VARCHAR(50) NOT NULL,
    CUR_YEAR_LEVEL INTEGER NOT NULL,
    CUR_SEMESTER INTEGER NOT NULL,
	
    PRIMARY KEY (CUR_CODE, CRS_CODE),
    FOREIGN KEY (CUR_CODE) REFERENCES CURRICULUM(CUR_CODE) ON DELETE CASCADE,
    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) ON DELETE CASCADE
);

CREATE TABLE CURRICULUM_COURSE_TEMP (
    CUR_CODE VARCHAR(50) NOT NULL,
    CRS_CODE VARCHAR(50) NOT NULL,
    CUR_YEAR_LEVEL INTEGER NOT NULL,
    CUR_SEMESTER INTEGER NOT NULL,
	
    PRIMARY KEY (CUR_CODE, CRS_CODE),
    FOREIGN KEY (CUR_CODE) REFERENCES CURRICULUM(CUR_CODE) ON DELETE CASCADE,
    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) ON DELETE CASCADE
);

CREATE TABLE COURSE_TAKEN (
    STUD_ID INTEGER NOT NULL,
    CRS_CODE VARCHAR(50) NOT NULL,
    CRST_STATUS VARCHAR(20) NOT NULL,
    PRIMARY KEY (STUD_ID, CRS_CODE),
    FOREIGN KEY (STUD_ID) REFERENCES STUDENT(STUD_ID) ON DELETE CASCADE,
    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) ON DELETE CASCADE
);

CREATE TABLE ROOM (
    ROOM_ID SERIAL PRIMARY KEY,
    ROOM_CODE VARCHAR(20) NOT NULL UNIQUE,
    PROG_CODE VARCHAR(50) NOT NULL,
    FOREIGN KEY (PROG_CODE) REFERENCES PROGRAM(PROG_CODE)
);

CREATE TABLE PROFESSOR (
    PROF_ID SERIAL PRIMARY KEY,
    PROF_NAME VARCHAR(100) NOT NULL,
    PROG_CODE VARCHAR(50) NOT NULL,
    FOREIGN KEY (PROG_CODE) REFERENCES PROGRAM(PROG_CODE)
);

CREATE TABLE TIME_SLOT (
    SCHD_ID INTEGER NOT NULL,
    TSL_START_TIME TIME NOT NULL,
    TSL_END_TIME TIME NOT NULL,
    TSL_DAY VARCHAR(10) NOT NULL,
    PRIMARY KEY (SCHD_ID, TSL_START_TIME, TSL_DAY),
    FOREIGN KEY (SCHD_ID) REFERENCES SCHEDULE(SCHD_ID) ON DELETE CASCADE,
    CONSTRAINT VALID_TIME_SLOT CHECK (TSL_END_TIME > TSL_START_TIME)
);

CREATE TABLE SCHEDULE (
    SCHD_ID SERIAL PRIMARY KEY,
    CRS_CODE VARCHAR(50) NOT NULL,
    ROOM_ID INTEGER NOT NULL,
    BSEC_CODE VARCHAR(20) NOT NULL,
    PROF_ID INTEGER NOT NULL,
    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE),
    FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ROOM_ID),
    FOREIGN KEY (BSEC_CODE) REFERENCES BLOCK_SECTION(BSEC_CODE),
    FOREIGN KEY (PROF_ID) REFERENCES PROFESSOR(PROF_ID)
);

-- Step 1: Create the sequence
CREATE SEQUENCE schedule_schd_id_seq
    START WITH 1000
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

-- Step 2: Set default value for SCHD_ID
ALTER TABLE SCHEDULE
    ALTER COLUMN SCHD_ID SET DEFAULT nextval('schedule_schd_id_seq');

-- Step 3: Set the current value of the sequence
SELECT setval('schedule_schd_id_seq', 1000);

CREATE TABLE PREREQUISITE (
    CRS_CODE VARCHAR(50) PRIMARY KEY,
    PREQ_CRS_CODE VARCHAR(50),
	PRIMARY KEY (CRS_CODE, PREQ_CRS_CODE),

    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE),
    FOREIGN KEY (PREQ_CRS_CODE) REFERENCES COURSE(CRS_CODE)
);

CREATE TABLE ENROLLMENT (
    ENROL_ID SERIAL PRIMARY KEY,
    ENROL_STATUS VARCHAR(20) NOT NULL,
    ENROL_DATE DATE NOT NULL,
    ENROL_YR_LEVEL INT NOT NULL,
    ENROL_SEM INT NOT NULL,
    STUD_ID INT NOT NULL,
    AY_CODE VARCHAR(10) NOT NULL,
	
    FOREIGN KEY (STUD_ID) REFERENCES STUDENT(STUD_ID),
    FOREIGN KEY (AY_CODE) REFERENCES ACADEMIC_YEAR(AY_CODE)
);

CREATE TABLE CURRENT_ENROLLMENT (
    CUREN_ID SERIAL PRIMARY KEY,
    CUREN_STATUS VARCHAR(20) DEFAULT 'ongoing',
    AY_CODE VARCHAR(10) NOT NULL,
    SEM_ID INT NOT NULL,
	
    FOREIGN KEY (AY_CODE) REFERENCES ACADEMIC_YEAR(AY_CODE),
    CONSTRAINT chk_status CHECK (CUREN_STATUS IN ('ongoing', 'ended')),
	FOREIGN KEY (SEM_ID) REFERENCES SEMESTER(SEM_ID)
);


CREATE TABLE ENROLLING_COURSE (
    CRS_CODE VARCHAR(20) NOT NULL,
    ENROL_ID INT NOT NULL,
    SCHD_ID INT,
	
    PRIMARY KEY (CRS_CODE, ENROL_ID),
    FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE),
    FOREIGN KEY (ENROL_ID) REFERENCES ENROLLMENT(ENROL_ID),
    FOREIGN KEY (SCHD_ID) REFERENCES SCHEDULE(SCHD_ID)
);

CREATE TABLE YEAR_LEVEL (
	YRL_ID INT PRIMARY KEY,
	YRL_TITLE VARCHAR(20) NOT NULL
);

INSERT INTO SEMESTER (SEM_ID, SEM_NAME) VALUES 
(1, '1st Semester'),
(2, '2nd Semester'),
(3, 'Summer');

SELECT * FROM SEMESTER

INSERT INTO YEAR_LEVEL (YRL_ID, YRL_TITLE) VALUES 
(1, 'First Year'),
(2, 'Second Year'),
(3, 'Third Year'),
(4, 'Fourth Year');

INSERT INTO PROGRAM (PROG_CODE, PROG_TITLE) VALUES 
('BSIT', 'Bachelor of Science in Information Technology'),
('BSIS', 'Bachelor of Science in Information System'),
('BIT-CT', 'Bachelor of Information Technology - Computer Technology');

INSERT INTO COURSE_CATEGORY (CTG_CODE, CTG_NAME) VALUES
('GEC', 'Core Courses'),
('GEC2', 'Mandated Course, Rizal'),
('GEE', 'Elective Courses'),
('CC', 'Common Courses'),
('PC', 'Professional Courses'),
('OJT', 'On-the-Job Training'),
('PELEC', 'Professional Electives'),
('AP', 'Professional/Domain Courses'),
('PE', 'Physical Education'),
('NSTP', 'National Service Training Program');

INSERT INTO ACADEMIC_YEAR (AY_CODE, AY_START_YEAR, AY_END_YEAR) VALUES
('2025-2026', 2025, 2026),
('2026-2027', 2026, 2027),
('2027-2028', 2027, 2028),
('2028-2029', 2028, 2029),
('2029-2030', 2029, 2030),
('2030-2031', 2030, 2031);

SELECT * FROM COURSE







