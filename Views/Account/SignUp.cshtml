@{
    ViewData["Title"] = "Student Sign Up";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    @Styles.Render("~/Content/signin.css")
    @Scripts.Render("~/bundles/modernizr")
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .input-bar select {
            font-family: 'Montserrat', sans-serif;
            border: 1px solid black;
            box-sizing: border-box;
            height: 30px;
            margin-top: 2px;
            width: 100%;
            max-width: 100%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Style for the dropdown options */
        .input-bar select option {
            font-family: 'Montserrat', sans-serif;
            padding: 8px;
            background-color: white;
            color: black;
        }
        
        .input-bar select option {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }

        /* Selected option style */
        .input-bar select option:checked {
            background-color: #FE7743; /* Your button color */
            color: white;
        }

        /* Focus state */
        .input-bar select:focus {
            outline: none;
            border-color: black;
        }

        /* IE compatibility */
        .input-bar select::-ms-expand {
            display: none;
        }
        
       
        .input-bar select option {
            color: black;
        }
        
    </style>
</head>
<body>
<section class="register-section">
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage as string))
    {
        <div class="alert alert-danger text-center mb-4">
            @ViewBag.ErrorMessage
        </div>
    }
    <div class="student-form">
        <div id="signupForm">
            <h1>Create Student Account</h1>
            <div class="fields-grid">
                <div class="input-bar">
                    @Html.Label("StudentID", "Student ID", new { @class = "form-label" })
                    @Html.TextBox("StudentID", null, new { @class = "form-control", placeholder = "Student ID" })
                    <p class="error-label">Incorrect Password</p>
                </div>
                <div class="input-bar">
                    @Html.Label("ProgramCode", "Program", new { @class = "form-label" })
                    @{
                        var programs = ViewBag.Programs as List<Enrollment_System.Models.Program>;
                        var programList = programs != null && programs.Count > 0 
                            ? new SelectList(programs, "Code", "Title")
                            : new SelectList(new List<SelectListItem> { new SelectListItem { Text = "No programs available", Value = "" } }, "Value", "Text");
                    }
                    @Html.DropDownList("ProgramCode", programList, "Select Program", new { 
                        @class = "form-select",
                        @required = "required"
                    })
                    <p class="error-label" id="program-error" style="display: none;">Please select a program</p>
                </div>
            </div>

            <div class="input-bar">
                @Html.Label("Birthdate", "Birth Date", new { @class = "form-label" })
                @Html.TextBox("Birthdate", null, new { @class = "form-control", type = "date" })
                <p class="error-label">Incorrect Password</p>
            </div>

            <div class="name-fields-grid">
                <div class="input-bar">
                    @Html.Label("LastName", "Last Name", new { @class = "form-label" })
                    @Html.TextBox("LastName", null, new { @class = "form-control", placeholder = "Last Name" })
                    <p class="error-label">Incorrect Password</p>
                </div>
                <div class="input-bar">
                    @Html.Label("FirstName", "First Name", new { @class = "form-label" })
                    @Html.TextBox("FirstName", null, new { @class = "form-control", placeholder = "First Name" })
                    <p class="error-label">Incorrect Password</p>
                </div>
                <div class="input-bar">
                    @Html.Label("MiddleName", "Middle Name", new { @class = "form-label" })
                    @Html.TextBox("MiddleName", null, new { @class = "form-control", placeholder = "Middle Name" })
                    <p class="error-label">Incorrect Password</p>
                </div>
            </div>

            <div class="input-bar">
                @Html.Label("HomeAddress", "Home Address", new { @class = "form-label" })
                @Html.TextBox("HomeAddress", null, new { @class = "form-control", placeholder = "Address" })
                <p class="error-label">Incorrect Password</p>
            </div>

            <div class="fields-grid">
                <div class="input-bar">
                    @Html.Label("Contact", "Contact Number", new { @class = "form-label" })
                    @Html.TextBox("Contact", null, new { @class = "form-control", placeholder = "Contact" })
                    <p class="error-label">Incorrect Password</p>
                </div>
                <div class="input-bar">
                    @Html.Label("Email", "Email", new { @class = "form-label" })
                    @Html.TextBox("Email", null, new { @class = "form-control", placeholder = "Email", type = "email" })
                    <p class="error-label">Incorrect Password</p>
                </div>
            </div>

            <div class="fields-grid">
                <div class="input-bar">
                    @Html.Label("Password", "Password", new { @class = "form-label" })
                    @Html.Password("Password", null, new { @class = "form-control", placeholder = "Password" })
                </div>
                <div class="input-bar">
                    @Html.Label("ConfirmPassword", "Confirm Password", new { @class = "form-label" })
                    @Html.Password("ConfirmPassword", null, new { @class = "form-control", placeholder = "Confirm Password" })
                    <p class="error-label">Incorrect Password</p>
                </div>
            </div>

            <div class="input-bar">
                <input type="submit" class="submit-btn" id="submitButton" value="Create Account">
            </div>

            <div class="account-toggle">
                <p>Already have an account? <a href="@Url.Action("StudentLogIn", "Account")" id="showSignin">Sign In</a></p>
            </div>
        </div>
    </div>
</section>
<script src="~/Scripts/JQuery/jquery.js"></script>
<script>
    $(document).ready(function () {
        $('#submitButton').click(function (e) {
            e.preventDefault(); // Add this to prevent form submission
            $('.input-error').removeClass('input-error');

            // Validate Program is selected
            if (!$('#ProgramCode').val()) {
                Swal.fire('Error', 'Please select a program', 'error');
                $('#Program').addClass('input-error').focus();
                return;
            }

            // Reset errors
            $('.error-label').hide();

            // Validate Program selection
            if (!$('#ProgramCode').val()) {
                $('#program-error').show();
                $('#Program').addClass('input-error').focus();
                return;
            }

            // Password validation
            if ($('#Password').val() !== $('#ConfirmPassword').val()) {
                Swal.fire('Error', 'Passwords do not match', 'error');
                $('#ConfirmPassword').addClass('input-error').focus();
                return;
            }

            const student = {
                Id: parseInt($('#StudentID').val()) || 0,
                Program: $('#ProgramCode').val(),
                LastName: $('#LastName').val(),
                FirstName: $('#FirstName').val(),
                MiddleName: $('#MiddleName').val(),
                Birthdate: $('#Birthdate').val(),
                Contact: $('#Contact').val(),
                Email: $('#Email').val(),
                HomeAddress: $('#HomeAddress').val(),
                Password: $('#Password').val()
            };

            console.log('Submitting student:', student);

            $.ajax({
                type: "POST",
                url: '/Account/SignUp',
                contentType: 'application/json',
                data: JSON.stringify(student),
                success: function (response) {
                    if (response.mess === 1) {
                        Swal.fire({
                            title: 'Success!',
                            text: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK',
                            timer: 2000,
                            timerProgressBar: true,
                            willClose: () => {
                                window.location.href = response.redirectUrl;
                            }
                        });
                    } else if (response.mess === 2 || response.mess === 3) {
                        Swal.fire({
                            title: 'Error',
                            text: response.error,
                            icon: 'error',
                            confirmButtonText: 'Try Again'
                        });
                        $('#' + response.field).addClass('input-error').focus();
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: response.earror || "Submission failed.",
                            icon: 'error',
                            confirmButtonText: 'Try Again'
                        });
                    }
                },
                error: function (xhr) {
                    console.error('Error:', xhr.responseText);
                    Swal.fire('Error', xhr.responseJSON?.error || "Submission failed", 'error');
                }
            });
        });
    });
</script>
</body>
</html>