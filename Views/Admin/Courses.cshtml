@model IEnumerable<Enrollment_System.Models.Course>
@{
    Layout = "~/Views/Shared/AdminHeader.cshtml";
    ViewBag.Title = "Manage Courses - Enrollment System";
    var prerequisites = ViewBag.Prerequisites as List<Enrollment_System.Models.Prerequisite>;
    var prerequisitesLookup = prerequisites != null 
        ? prerequisites
            .GroupBy(p => p.CourseCode)
            .ToDictionary(g => g.Key, g => g.Select(p => p.PrerequisiteCourseCode).ToList())
        : new Dictionary<string, List<string>>(); // Default empty dictionary
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
    body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .content-section {
        padding: 0;
        flex-grow: 1;
    }

    .table-responsive {
        margin-bottom: 30px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.25) !important;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 5px;
    }

    th, td {
        border: 1px solid #000000 !important;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #273F4F;
        font-weight: 500;
        color: white;
    }
    
    .edit-buttons {
        display: flex;
        width: 100%;
        justify-content: space-between;
    }

    .edit-buttons button {
        margin: 5px 0;
        background-color: #273F4F;
        color: #EFEEEA;
        border: 0 solid #000000;
        padding: 3px;
        font-family: 'Montserrat', serif;
        font-size: 1.1rem;
        min-width: 150px;
        min-height: 30px;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
        /* Removed border declaration */
    }

    /* Added specific styling for action buttons container cell */
    td.action-buttons-cell {
        border: 1px solid #000000 !important;
    }

    .action-buttons a {
        text-decoration: none;
        padding: 5px 10px;
        border-radius: 0;
        border: none; /* Changed from 1px solid #000000 to none */
        font-size: 0.9rem;
    }

    .btn-warning {
        background-color: #FE7743;
        color: #212529;
    }
    
    .btn {
        border-radius: 0 !important;
        background-color: #273F4F !important;
        font-weight: 500 !important;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.25) !important;
        border: none !important; /* Added to ensure no border */
    }

    .btn-danger {
        color: white;
        border-radius: 0;
        border: none;
        padding: 5px;
    }

    .btn-success {
        background-color: #273F4F;
        color: white;
        border-radius: 0;
    }

    .no-courses {
        text-align: center;
        padding: 20px;
        color: #6C757D;
    }
</style>
}
<div class="container content-section">
    <div class="course-table">
        <div class="d-flex justify-content-between align-items-center mb-3 ">
            <h2>Courses List</h2>
            @Html.ActionLink("Add New Course", "Index", "AddCourse", null, new { @class = "btn btn-success" })
        </div>

        <div class="table-responsive">
            <table>
                <thead>
                    <tr>
                        <th>Course Code</th>
                        <th>Descriptive Title</th>
                        <th>Course Category</th>
                        <th>Prerequisite(s)</th>
                        <th>Units</th>
                        <th>Lec Hours</th>
                        <th>Lab Hours</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                @if (Model == null || !Model.Any())
                {
                    <tr>
                        <td colspan="8" class="no-courses">
                            <i class="bi bi-exclamation-circle"></i> No courses found.
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var course in Model)
                    {
                        var coursePrerequisites = (prerequisitesLookup != null && prerequisitesLookup.ContainsKey(course.Code)) 
                            ? prerequisitesLookup[course.Code] 
                            : new List<string>();
        
                        <tr>
                            <td>@course.Code</td>
                            <td>@course.Title</td>
                            <td>@course.CategoryName</td>
                            <td>
                                @if (coursePrerequisites.Count == 0)
                                {
                                    <span class="text-muted">None</span>
                                }
                                else
                                {
                                    <span>@string.Join(", ", coursePrerequisites)</span>
                                }
                            </td>
                            <td>@course.Units</td>
                            <td>@course.LecHours</td>
                            <td>@course.LabHours</td>
                            <td class="action-buttons-cell">
                                <div class="action-buttons">
                                    <button class="btn-danger" id="deleteCourse">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function() {
        // Delete course functionality
        $(document).on('click', '#deleteCourse', function() {
            const row = $(this).closest('tr');
            const courseCode = row.find('td:first').text();
            const courseTitle = row.find('td:nth-child(2)').text();
            
            Swal.fire({
                title: 'Confirm Deletion',
                html: `Are you sure you want to delete <strong>${courseCode} - ${courseTitle}</strong>?<br><br>
                      <span class="text-danger">This action cannot be undone!</span>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#273F4F',
                confirmButtonText: 'Delete',
                cancelButtonText: 'Cancel',
                width: '500px'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteCourse", "Course")',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ code: courseCode }),
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: response.message,
                                    icon: 'success',
                                    confirmButtonColor: '#273F4F'
                                }).then(() => {
                                    // Remove the row from the table
                                    row.fadeOut(300, function() {
                                        $(this).remove();
                                        // If no more rows, show "No courses" message
                                        if ($('#programTableBody tr').length === 0) {
                                            $('#programTableBody').append(
                                                `<tr><td colspan="8" class="no-courses">No courses found.</td></tr>`
                                            );
                                        }
                                    });
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: response.error,
                                    icon: 'error',
                                    confirmButtonColor: '#273F4F'
                                });
                            }
                        },
                        error: function(xhr) {
                            Swal.fire({
                                title: 'Error!',
                                text: xhr.responseJSON?.error || 'An error occurred while deleting the course.',
                                icon: 'error',
                                confirmButtonColor: '#273F4F'
                            });
                        }
                    });
                }
            });
        });
    });
    </script>
}