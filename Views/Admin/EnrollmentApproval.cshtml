@model IEnumerable<Enrollment_System.Models.Enrollment>
@{
ViewBag.Title = "Enrollment";
Layout = "~/Views/Shared/AdminHeader.cshtml";
}

@section Styles {
<style>
    body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .content-section {
        padding: 30px;
        flex-grow: 1;
    }

    .table-responsive {
        margin-bottom: 30px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.25) !important;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 5px;
    }

    th, td {
        border: 1px solid #000000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #273F4F;
        font-weight: 500;
        color: white;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
    }

    .btn {
        border-radius: 0 !important;
        background-color: #273F4F !important;
        font-weight: 500 !important;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.25) !important;
        color: white !important;
        padding: 5px 10px !important;
        font-size: 0.9rem !important;
    }

    .btn-info {
        background-color: #273F4F !important;
    }

    .btn-success {
        background-color: #273F4F !important;
    }

    .btn-danger {
        background-color: #273F4F !important;
    }

    .no-enrollments {
        text-align: center;
        padding: 20px;
        color: #6C757D;
    }

    .d-flex {
        display: flex;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    .align-items-center {
        align-items: center;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .status-pending {
        color: #FFC107;
        font-weight: bold;
    }

    .status-approved {
        color: #28A745;
        font-weight: bold;
    }

    .status-rejected {
        color: #DC3545;
        font-weight: bold;
    }

    .modal-content {
        border-radius: 0;
        border: none;
    }
    .modal-header {
        background-color: #273F4F;
        color: white;
        border-bottom: none;
    }
    .modal-body {
        padding: 20px;
    }
    .modal-footer {
        border-top: none;
        background-color: #f8f9fa;
    }
    .enrollment-details dt {
        font-weight: 600;
        margin-top: 10px;
    }
    .enrollment-details dd {
        margin-bottom: 15px;
    }
    .table-responsive {
        max-height: 500px;
        overflow-y: auto;
    }

    /* Enhanced Enrollment Period Section */
    .enrollment-period-section {
        background-color: #f8f9fa;
        padding: 20px;
        margin-bottom: 30px;
        border: 1px solid #dee2e6;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .enrollment-period-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .period-details {
        flex: 1;
        min-width: 250px;
    }

    .period-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .current-period {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 5px;
    }

    #currentPeriodText {
        font-weight: 600;
    }

    #currentPeriodStatus {
        font-size: 0.9rem;
        font-weight: normal;
    }

    .period-active {
        color: #28a745;
    }

    .period-inactive {
        color: #dc3545;
    }

    .period-completed {
        color: #17a2b8;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
    }
</style>
}

<div class="container content-section">
    <!-- Enrollment Period Section -->
    <div class="enrollment-period-section">
        <div class="enrollment-period-info d-flex justify-content-between align-items-center">
            <div class="period-details">
                <h4>Enrollment Period</h4>
                <div class="current-period">
                    Current Period:
                    <h4>
                        <span id="currentPeriodText">Loading...</span>
                        <span id="currentPeriodStatus" class="ml-2"></span>
                    </h4>
                </div>
            </div>
            <div class="period-actions" id="enrollmentPeriodActions">
                <!-- Buttons will be dynamically inserted here -->
            </div>
        </div>
    </div>
    
    <div class="enrollment-table">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2>Enrollment Approval</h2>
        </div>

        <div class="table-responsive">
            <table>
                <thead>
                <tr>
                    <th>Student ID</th>
                    <th>Student Name</th>
                    <th>Program</th>
                    <th>Year & Semester</th>
                    <th>Academic Year</th>
                    <th>Status</th>
                    <th>Date Submitted</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="enrollmentApprovalsTableBody">
                @if (Model == null || !Model.Any())
                {
                <tr>
                    <td colspan="8" class="no-enrollments">
                        <i class="bi bi-exclamation-circle"></i> No pending enrollments found.
                    </td>
                </tr>
                }
                else
                {
                foreach (var enrollment in Model)
                {
                <tr data-enrollment-id="@enrollment.Id">
                    <td>@enrollment.StudentId</td>
                    <td>@(enrollment.StudentName)</td>
                    <td>@(enrollment.Program)</td>
                    <td>@GetYearLevelName(enrollment.YearLevel) - @GetSemesterName(enrollment.Semester)</td>
                    <td>@enrollment.AcademicYear</td>
                    <td class="status-@enrollment.Status.ToLower()">@enrollment.Status</td>
                    <td>@enrollment.Date</td>
                    <td class="action-buttons">
                        <button class="btn btn-info btn-sm view-btn" data-id="@enrollment.Id">View More</button>
                        @if (enrollment.Status == "Pending")
                        {
                        <button class="btn btn-success btn-sm approve-btn" data-id="@enrollment.Id">Approve</button>
                        <button class="btn btn-danger btn-sm reject-btn" data-id="@enrollment.Id">Reject</button>
                        }
                    </td>
                </tr>
                }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Enrollment Details Modal -->
<div class="modal fade" id="enrollmentModal" tabindex="-1" aria-labelledby="enrollmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="enrollmentModalLabel">Enrollment Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="enrollment-details">
                            <dt>Student ID:</dt>
                            <dd id="modalStudentId"></dd>

                            <dt>Student Name:</dt>
                            <dd id="modalStudentName"></dd>

                            <dt>Program:</dt>
                            <dd id="modalProgram"></dd>

                            <dt>Year Level:</dt>
                            <dd id="modalYearLevel"></dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl class="enrollment-details">
                            <dt>Semester:</dt>
                            <dd id="modalSemester"></dd>

                            <dt>Academic Year:</dt>
                            <dd id="modalAcademicYear"></dd>

                            <dt>Status:</dt>
                            <dd id="modalStatus"></dd>

                            <dt>Date Submitted:</dt>
                            <dd id="modalDateSubmitted"></dd>
                        </dl>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-12">
                        <h5>Enrolled Courses:</h5>
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped">
                                <thead>
                                <tr>
                                    <th>Schedule ID</th>
                                    <th>Course</th>
                                    <th>Description</th>
                                    <th>Units</th>
                                    <th>Time</th>
                                    <th>Day</th>
                                    <th>Room</th>
                                    <th>Instructor</th>
                                </tr>
                                </thead>
                                <tbody id="enrolledCoursesTableBody">
                                <!-- Will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="enrollmentPeriodModal" tabindex="-1" aria-labelledby="enrollmentPeriodModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="enrollmentPeriodModalLabel">Set Enrollment Period</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="enrollmentPeriodForm">
                    <div class="form-group">
                        <label for="academicYear" class="form-label">Academic Year</label>
                        <select class="form-select" id="academicYear" name="academicYear">
                            <option value="" selected disabled>Choose Academic Year...</option>
                            @{
                                var academicYears = ViewBag.AcademicYears as List<Enrollment_System.Models.AcademicYear>;
                                if (academicYears != null && academicYears.Any())
                                {
                                    foreach (var year in academicYears)
                                    {
                                        <option value="@year.Code">@year.StartYear - @year.EndYear</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>No academic years available</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="semester" class="form-label">Semester</label>
                        <select class="form-select" id="semester" name="semester">
                            <option value="" selected disabled>Choose Semester...</option>
                            @{
                                var semesters = ViewBag.Semesters as List<Enrollment_System.Models.Semester>;
                                if (semesters != null && semesters.Any())
                                {
                                    foreach (var sem in semesters)
                                    {
                                        <option value="@sem.Id">@sem.Name</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>No semesters available</option>
                                }
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEnrollmentPeriod">Start Period</button>
            </div>
        </div>
    </div>
</div>

@functions {
public string GetYearLevelName(int yearLevel)
{
switch (yearLevel)
{
case 1:
return "1st Year";
case 2:
return "2nd Year";
case 3:
return "3rd Year";
case 4:
return "4th Year";
default:
return yearLevel + "th Year";
}
}

public string GetSemesterName(int semester)
{
switch (semester)
{
case 1:
return "1st Semester";
case 2:
return "2nd Semester";
default:
return semester + "th Semester";
}
}
}
@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize Bootstrap modals
        var enrollmentModal = new bootstrap.Modal(document.getElementById('enrollmentModal'));
        var enrollmentPeriodModal = new bootstrap.Modal(document.getElementById('enrollmentPeriodModal'));

        // Use event delegation for dynamically created buttons
        document.addEventListener('click', function(e) {
            // Handle End Period button
            if (e.target && e.target.id === 'endEnrollmentPeriod') {
                if (!confirm('Are you sure you want to end the current enrollment period?')) return;
                
                fetch('@Url.Action("EndEnrollmentPeriod", "Enrollment")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('Enrollment period has been marked as completed');
                        loadCurrentEnrollmentPeriod();
                    } else {
                        throw new Error(data.error || 'Failed to end enrollment period');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(`Error: ${error.message}`);
                });
            }
        });

        function updateEnrollmentPeriodUI(hasActivePeriod) {
            const actionsContainer = document.getElementById('enrollmentPeriodActions');
            
            if (!actionsContainer) return;
            
            if (hasActivePeriod) {
                actionsContainer.innerHTML = `
                    <button type="button" class="btn btn-secondary me-2" id="endEnrollmentPeriod">End Period</button>
                `;
            } else {
                actionsContainer.innerHTML = `
                    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#enrollmentPeriodModal">
                        Start Enrollment Period
                    </button>
                `;
            }
        }

        function loadCurrentEnrollmentPeriod() {
            fetch('@Url.Action("GetCurrentEnrollmentPeriod", "Enrollment")')
                .then(response => {
                    if (!response.ok) throw new Error('Failed to load enrollment period');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        const period = data.period;
                        const hasActivePeriod = period && period.IsActive;
                        
                        const currentPeriodText = document.getElementById('currentPeriodText');
                        const currentPeriodStatus = document.getElementById('currentPeriodStatus');
                        
                        if (currentPeriodText && currentPeriodStatus) {
                            if (period) {
                                currentPeriodText.textContent = 
                                    `${period.AcademicYear} - Semester ${period.SemesterName}`;
                                currentPeriodStatus.className = 
                                    period.isActive ? 'ml-2 period-active' : 'ml-2 period-completed';
                                currentPeriodStatus.textContent = 
                                    period.IsActive ? '(Active)' : '(Completed)';
                            } else {
                                currentPeriodText.textContent = 'No enrollment period set';
                                currentPeriodStatus.textContent = '';
                            }
                        }
                        
                        updateEnrollmentPeriodUI(hasActivePeriod);
                    }
                })
                .catch(error => {
                    console.error('Error loading enrollment period:', error);
                    const currentPeriodText = document.getElementById('currentPeriodText');
                    if (currentPeriodText) {
                        currentPeriodText.textContent = 'Error loading period';
                    }
                });
        }

        // Rest of your existing code remains exactly the same...
        document.getElementById('saveEnrollmentPeriod').addEventListener('click', function() {
            const academicYear = document.getElementById('academicYear').value;
            const semesterId = document.getElementById('semester').value;

            // Simple validation
            if (!academicYear || !semesterId) {
                alert('Please fill all required fields');
                return;
            }

            // Create simple object instead of FormData
            const data = {
                academicYear: academicYear,
                semId: semesterId,
                isActive: true // Hardcoded as true
            };

            fetch('@Url.Action("SetEnrollmentPeriod", "Enrollment")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('Enrollment period saved successfully');

                        // Close modal
                        bootstrap.Modal.getInstance(document.getElementById('enrollmentPeriodModal')).hide();

                        // Refresh the current enrollment period display
                        loadCurrentEnrollmentPeriod();
                    } else {
                        throw new Error(data.error || 'Failed to save enrollment period');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(`Error: ${error.message}`);
                });
        });

        // Load current period on page load
        loadCurrentEnrollmentPeriod();

        // View More button handler
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const enrollmentId = this.getAttribute('data-id');
                loadEnrollmentDetails(enrollmentId);
            });
        });

        // Function to load enrollment details
        function loadEnrollmentDetails(enrollmentId) {
            // Show loading state
            document.getElementById('modalStudentId').textContent = "Loading...";
            document.getElementById('modalStudentName').textContent = "Loading...";
            document.getElementById('modalProgram').textContent = "Loading...";
            document.getElementById('modalYearLevel').textContent = "Loading...";
            document.getElementById('modalSemester').textContent = "Loading...";
            document.getElementById('modalAcademicYear').textContent = "Loading...";
            document.getElementById('modalStatus').textContent = "Loading...";
            document.getElementById('modalDateSubmitted').textContent = "Loading...";

            document.getElementById('enrolledCoursesTableBody').innerHTML =
                '<tr><td colspan="8" class="text-center"><div class="spinner-border text-primary" role="status"></div></td></tr>';

            // Show modal immediately while data loads
            enrollmentModal.show();

            // Fetch enrollment details
            fetch('@Url.Action("GetEnrollmentDetailsFromDatabase", "CourseManagement")' + '?id=' + enrollmentId)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to load enrollment details');
                    return response.json();
                })
                .then(data => {
                    if (!data.success) throw new Error(data.message || 'Error in enrollment data');

                    // Populate student details
                    document.getElementById('modalStudentId').textContent = data.enrollment.Id || 'N/A';
                    document.getElementById('modalStudentName').textContent = data.enrollment.StudentName || 'N/A';
                    document.getElementById('modalProgram').textContent = data.enrollment.Program || 'N/A';
                    document.getElementById('modalYearLevel').textContent = GetYearLevelName(data.enrollment.YearLevel) || 'N/A';
                    document.getElementById('modalSemester').textContent = GetSemesterName(data.enrollment.Semester) || 'N/A';
                    document.getElementById('modalAcademicYear').textContent = data.enrollment.AcademicYear || 'N/A';
                    document.getElementById('modalStatus').textContent = data.enrollment.Status || 'N/A';
                    document.getElementById('modalDateSubmitted').textContent = data.enrollment.Date || 'N/A';
                })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to load course details');
                    return response.json();
                })
                .then(courseData => {
                    if (!courseData.success) throw new Error(courseData.message || 'Error in course data');
                    updateEnrolledCoursesTable(courseData.courses);
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('enrolledCoursesTableBody').innerHTML =
                        `<tr class="table-danger"><td colspan="8">Error: ${error.message}</td></tr>`;
                });
        }

        // Approve/Reject button handlers
        document.querySelectorAll('.approve-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const enrollmentId = this.getAttribute('data-id');
                updateEnrollmentStatus(enrollmentId, 'Approve');
            });
        });

        document.querySelectorAll('.reject-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const enrollmentId = this.getAttribute('data-id');
                updateEnrollmentStatus(enrollmentId, 'Reject');
            });
        });

        function updateEnrollmentStatus(enrollmentId, action) {
            if (!confirm(`Are you sure you want to ${action.toLowerCase()} this enrollment?`)) {
                return;
            }

            const formData = new FormData();
            formData.append('enrollmentId', enrollmentId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch(action === 'Approve' ? '/ProgramHead/ApproveEnrollment' : '/ProgramHead/RejectEnrollment', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(`Error: ${error.message}`);
                });
        }

        function updateEnrolledCoursesTable(courses) {
            const tbody = document.getElementById('enrolledCoursesTableBody');
            tbody.innerHTML = '';

            if (!courses || courses.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" class="text-center">No courses found</td></tr>';
                return;
            }

            courses.forEach(course => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${course.ScheduleId || 'N/A'}</td>
                    <td>${course.Code || 'N/A'}</td>
                    <td>${course.Description || 'N/A'}</td>
                    <td>${course.Units || '0'}</td>
                    <td>${course.Time || 'Not scheduled'}</td>
                    <td>${course.Days || 'N/A'}</td>
                    <td>${course.Room || 'TBA'}</td>
                    <td>${course.Instructor || 'TBA'}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Helper functions to be used in the fetch response
        function GetYearLevelName(yearLevel) {
            switch (yearLevel) {
                case 1: return "1st Year";
                case 2: return "2nd Year";
                case 3: return "3rd Year";
                case 4: return "4th Year";
                default: return yearLevel + "th Year";
            }
        }

        function GetSemesterName(semester) {
            switch (semester) {
                case 1: return "1st Semester";
                case 2: return "2nd Semester";
                default: return semester + "th Semester";
            }
        }
    });
</script>
}